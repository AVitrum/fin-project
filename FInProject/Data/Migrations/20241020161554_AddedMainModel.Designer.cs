// <auto-generated />
using System;
using FInProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FInProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241020161554_AddedMainModel")]
    partial class AddedMainModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FInProject.Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AtEnd")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AtStart")
                        .HasColumnType("numeric");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("FInProject.Models.AssetTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentAssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentLiabilitiesAndProvisionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LongTermLiabilitiesAndProvisionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NonCurrentAssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NonCurrentAssetsHeldForSaleDisposalGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegisteredCapitalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAssetId");

                    b.HasIndex("CurrentLiabilitiesAndProvisionId");

                    b.HasIndex("LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroupId");

                    b.HasIndex("LongTermLiabilitiesAndProvisionId");

                    b.HasIndex("NonCurrentAssetId");

                    b.HasIndex("NonCurrentAssetsHeldForSaleDisposalGroupId");

                    b.HasIndex("RegisteredCapitalId");

                    b.ToTable("AssetTables");
                });

            modelBuilder.Entity("FInProject.Models.CurrentAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CashAndCashEquivalentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentBiologicalAssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentFinancialInvestmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OtherCurrentAssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OtherCurrentReceivablesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrepaidExpensesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceivablesForGoodsAndServicesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceivablesForSettlementsAdvancesIssuedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceivablesForSettlementsBudgetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceivablesForSettlementsIncludingIncomeTaxId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CashAndCashEquivalentsId");

                    b.HasIndex("CurrentBiologicalAssetsId");

                    b.HasIndex("CurrentFinancialInvestmentsId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("OtherCurrentAssetsId");

                    b.HasIndex("OtherCurrentReceivablesId");

                    b.HasIndex("PrepaidExpensesId");

                    b.HasIndex("ReceivablesForGoodsAndServicesId");

                    b.HasIndex("ReceivablesForSettlementsAdvancesIssuedId");

                    b.HasIndex("ReceivablesForSettlementsBudgetId");

                    b.HasIndex("ReceivablesForSettlementsIncludingIncomeTaxId");

                    b.HasIndex("SumId");

                    b.ToTable("CurrentAssets");
                });

            modelBuilder.Entity("FInProject.Models.CurrentLiabilitiesAndProvision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentAccountsPayableBudgetSettlementsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentAccountsPayableGoodsAndServicesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentAccountsPayableIncludingIncomeTaxId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentAccountsPayableInsuranceSettlementsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentAccountsPayableLongTermLiabilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentAccountsPayableWageSettlementsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentProvisionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeferredIncomeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OtherCurrentLiabilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShortTermBankLoansId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAccountsPayableBudgetSettlementsId");

                    b.HasIndex("CurrentAccountsPayableGoodsAndServicesId");

                    b.HasIndex("CurrentAccountsPayableIncludingIncomeTaxId");

                    b.HasIndex("CurrentAccountsPayableInsuranceSettlementsId");

                    b.HasIndex("CurrentAccountsPayableLongTermLiabilitiesId");

                    b.HasIndex("CurrentAccountsPayableWageSettlementsId");

                    b.HasIndex("CurrentProvisionsId");

                    b.HasIndex("DeferredIncomeId");

                    b.HasIndex("OtherCurrentLiabilitiesId");

                    b.HasIndex("ShortTermBankLoansId");

                    b.HasIndex("SumId");

                    b.ToTable("CurrentLiabilitiesAndProvisions");
                });

            modelBuilder.Entity("FInProject.Models.LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BalanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LiabilitiesRelatedToNonCurrentAssetsHeldForSaleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("LiabilitiesRelatedToNonCurrentAssetsHeldForSaleId")
                        .HasDatabaseName("IX_LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGro~1");

                    b.ToTable("LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroups");
                });

            modelBuilder.Entity("FInProject.Models.LongTermLiabilitiesAndProvision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeferredTaxLiabilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LongTermBankLoansId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LongTermProvisionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OtherLongTermLiabilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetFinancingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeferredTaxLiabilitiesId");

                    b.HasIndex("LongTermBankLoansId");

                    b.HasIndex("LongTermProvisionsId");

                    b.HasIndex("OtherLongTermLiabilitiesId");

                    b.HasIndex("SumId");

                    b.HasIndex("TargetFinancingId");

                    b.ToTable("LongTermLiabilitiesAndProvisions");
                });

            modelBuilder.Entity("FInProject.Models.NonCurrentAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccumulatedDepreciationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeferredTaxAssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FixedAssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IntangibleAssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvestmentPropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LongTermBiologicalAssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LongTermFinancialInvestmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LongTermReceivablesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OriginalCostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OriginalCostOfFixedAssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OtherFinancialInvestmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OtherNonCurrentAssetsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UncompletedCapitalInvestmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WearId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccumulatedDepreciationId");

                    b.HasIndex("DeferredTaxAssetsId");

                    b.HasIndex("FixedAssetsId");

                    b.HasIndex("IntangibleAssetsId");

                    b.HasIndex("InvestmentPropertyId");

                    b.HasIndex("LongTermBiologicalAssetsId");

                    b.HasIndex("LongTermFinancialInvestmentsId");

                    b.HasIndex("LongTermReceivablesId");

                    b.HasIndex("OriginalCostId");

                    b.HasIndex("OriginalCostOfFixedAssetsId");

                    b.HasIndex("OtherFinancialInvestmentsId");

                    b.HasIndex("OtherNonCurrentAssetsId");

                    b.HasIndex("SumId");

                    b.HasIndex("UncompletedCapitalInvestmentsId");

                    b.HasIndex("WearId");

                    b.ToTable("NonCurrentAssets");
                });

            modelBuilder.Entity("FInProject.Models.NonCurrentAssetsHeldForSaleDisposalGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BalanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NonCurrentAssetsHeldForSaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("NonCurrentAssetsHeldForSaleId");

                    b.ToTable("NonCurrentAssetsHeldForSaleDisposalGroups");
                });

            modelBuilder.Entity("FInProject.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AdditionalSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AuxiliaryMaterialCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ManufacturingOverheads")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("RawMaterialCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ScrapCost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FInProject.Models.RegisteredCapital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdditionalCapitalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PaidInCapitalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReserveCapitalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RetainedEarningsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RevaluationReserveId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnpaidCapitalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WithdrawnCapitalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalCapitalId");

                    b.HasIndex("PaidInCapitalId");

                    b.HasIndex("ReserveCapitalId");

                    b.HasIndex("RetainedEarningsId");

                    b.HasIndex("RevaluationReserveId");

                    b.HasIndex("SumId");

                    b.HasIndex("UnpaidCapitalId");

                    b.HasIndex("WithdrawnCapitalId");

                    b.ToTable("RegisteredCapitals");
                });

            modelBuilder.Entity("FInProject.Models.AssetTable", b =>
                {
                    b.HasOne("FInProject.Models.CurrentAsset", "CurrentAsset")
                        .WithMany()
                        .HasForeignKey("CurrentAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.CurrentLiabilitiesAndProvision", "CurrentLiabilitiesAndProvision")
                        .WithMany()
                        .HasForeignKey("CurrentLiabilitiesAndProvisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroup", "LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroup")
                        .WithMany()
                        .HasForeignKey("LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.LongTermLiabilitiesAndProvision", "LongTermLiabilitiesAndProvision")
                        .WithMany()
                        .HasForeignKey("LongTermLiabilitiesAndProvisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.NonCurrentAsset", "NonCurrentAsset")
                        .WithMany()
                        .HasForeignKey("NonCurrentAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.NonCurrentAssetsHeldForSaleDisposalGroup", "NonCurrentAssetsHeldForSaleDisposalGroup")
                        .WithMany()
                        .HasForeignKey("NonCurrentAssetsHeldForSaleDisposalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.RegisteredCapital", "RegisteredCapital")
                        .WithMany()
                        .HasForeignKey("RegisteredCapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentAsset");

                    b.Navigation("CurrentLiabilitiesAndProvision");

                    b.Navigation("LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroup");

                    b.Navigation("LongTermLiabilitiesAndProvision");

                    b.Navigation("NonCurrentAsset");

                    b.Navigation("NonCurrentAssetsHeldForSaleDisposalGroup");

                    b.Navigation("RegisteredCapital");
                });

            modelBuilder.Entity("FInProject.Models.CurrentAsset", b =>
                {
                    b.HasOne("FInProject.Models.Asset", "CashAndCashEquivalents")
                        .WithMany()
                        .HasForeignKey("CashAndCashEquivalentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "CurrentBiologicalAssets")
                        .WithMany()
                        .HasForeignKey("CurrentBiologicalAssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "CurrentFinancialInvestments")
                        .WithMany()
                        .HasForeignKey("CurrentFinancialInvestmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "OtherCurrentAssets")
                        .WithMany()
                        .HasForeignKey("OtherCurrentAssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "OtherCurrentReceivables")
                        .WithMany()
                        .HasForeignKey("OtherCurrentReceivablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "PrepaidExpenses")
                        .WithMany()
                        .HasForeignKey("PrepaidExpensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "ReceivablesForGoodsAndServices")
                        .WithMany()
                        .HasForeignKey("ReceivablesForGoodsAndServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "ReceivablesForSettlementsAdvancesIssued")
                        .WithMany()
                        .HasForeignKey("ReceivablesForSettlementsAdvancesIssuedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "ReceivablesForSettlementsBudget")
                        .WithMany()
                        .HasForeignKey("ReceivablesForSettlementsBudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "ReceivablesForSettlementsIncludingIncomeTax")
                        .WithMany()
                        .HasForeignKey("ReceivablesForSettlementsIncludingIncomeTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "Sum")
                        .WithMany()
                        .HasForeignKey("SumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CashAndCashEquivalents");

                    b.Navigation("CurrentBiologicalAssets");

                    b.Navigation("CurrentFinancialInvestments");

                    b.Navigation("Inventory");

                    b.Navigation("OtherCurrentAssets");

                    b.Navigation("OtherCurrentReceivables");

                    b.Navigation("PrepaidExpenses");

                    b.Navigation("ReceivablesForGoodsAndServices");

                    b.Navigation("ReceivablesForSettlementsAdvancesIssued");

                    b.Navigation("ReceivablesForSettlementsBudget");

                    b.Navigation("ReceivablesForSettlementsIncludingIncomeTax");

                    b.Navigation("Sum");
                });

            modelBuilder.Entity("FInProject.Models.CurrentLiabilitiesAndProvision", b =>
                {
                    b.HasOne("FInProject.Models.Asset", "CurrentAccountsPayableBudgetSettlements")
                        .WithMany()
                        .HasForeignKey("CurrentAccountsPayableBudgetSettlementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "CurrentAccountsPayableGoodsAndServices")
                        .WithMany()
                        .HasForeignKey("CurrentAccountsPayableGoodsAndServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CurrentLiabilitiesAndProvisions_Assets_CurrentAccountsPaya~1");

                    b.HasOne("FInProject.Models.Asset", "CurrentAccountsPayableIncludingIncomeTax")
                        .WithMany()
                        .HasForeignKey("CurrentAccountsPayableIncludingIncomeTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CurrentLiabilitiesAndProvisions_Assets_CurrentAccountsPaya~2");

                    b.HasOne("FInProject.Models.Asset", "CurrentAccountsPayableInsuranceSettlements")
                        .WithMany()
                        .HasForeignKey("CurrentAccountsPayableInsuranceSettlementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CurrentLiabilitiesAndProvisions_Assets_CurrentAccountsPaya~3");

                    b.HasOne("FInProject.Models.Asset", "CurrentAccountsPayableLongTermLiabilities")
                        .WithMany()
                        .HasForeignKey("CurrentAccountsPayableLongTermLiabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CurrentLiabilitiesAndProvisions_Assets_CurrentAccountsPaya~4");

                    b.HasOne("FInProject.Models.Asset", "CurrentAccountsPayableWageSettlements")
                        .WithMany()
                        .HasForeignKey("CurrentAccountsPayableWageSettlementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CurrentLiabilitiesAndProvisions_Assets_CurrentAccountsPaya~5");

                    b.HasOne("FInProject.Models.Asset", "CurrentProvisions")
                        .WithMany()
                        .HasForeignKey("CurrentProvisionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "DeferredIncome")
                        .WithMany()
                        .HasForeignKey("DeferredIncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "OtherCurrentLiabilities")
                        .WithMany()
                        .HasForeignKey("OtherCurrentLiabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "ShortTermBankLoans")
                        .WithMany()
                        .HasForeignKey("ShortTermBankLoansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "Sum")
                        .WithMany()
                        .HasForeignKey("SumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentAccountsPayableBudgetSettlements");

                    b.Navigation("CurrentAccountsPayableGoodsAndServices");

                    b.Navigation("CurrentAccountsPayableIncludingIncomeTax");

                    b.Navigation("CurrentAccountsPayableInsuranceSettlements");

                    b.Navigation("CurrentAccountsPayableLongTermLiabilities");

                    b.Navigation("CurrentAccountsPayableWageSettlements");

                    b.Navigation("CurrentProvisions");

                    b.Navigation("DeferredIncome");

                    b.Navigation("OtherCurrentLiabilities");

                    b.Navigation("ShortTermBankLoans");

                    b.Navigation("Sum");
                });

            modelBuilder.Entity("FInProject.Models.LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGroup", b =>
                {
                    b.HasOne("FInProject.Models.Asset", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "LiabilitiesRelatedToNonCurrentAssetsHeldForSale")
                        .WithMany()
                        .HasForeignKey("LiabilitiesRelatedToNonCurrentAssetsHeldForSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LiabilitiesRelatedToNonCurrentAssetsHeldForSaleDisposalGro~1");

                    b.Navigation("Balance");

                    b.Navigation("LiabilitiesRelatedToNonCurrentAssetsHeldForSale");
                });

            modelBuilder.Entity("FInProject.Models.LongTermLiabilitiesAndProvision", b =>
                {
                    b.HasOne("FInProject.Models.Asset", "DeferredTaxLiabilities")
                        .WithMany()
                        .HasForeignKey("DeferredTaxLiabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "LongTermBankLoans")
                        .WithMany()
                        .HasForeignKey("LongTermBankLoansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "LongTermProvisions")
                        .WithMany()
                        .HasForeignKey("LongTermProvisionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "OtherLongTermLiabilities")
                        .WithMany()
                        .HasForeignKey("OtherLongTermLiabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "Sum")
                        .WithMany()
                        .HasForeignKey("SumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "TargetFinancing")
                        .WithMany()
                        .HasForeignKey("TargetFinancingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeferredTaxLiabilities");

                    b.Navigation("LongTermBankLoans");

                    b.Navigation("LongTermProvisions");

                    b.Navigation("OtherLongTermLiabilities");

                    b.Navigation("Sum");

                    b.Navigation("TargetFinancing");
                });

            modelBuilder.Entity("FInProject.Models.NonCurrentAsset", b =>
                {
                    b.HasOne("FInProject.Models.Asset", "AccumulatedDepreciation")
                        .WithMany()
                        .HasForeignKey("AccumulatedDepreciationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "DeferredTaxAssets")
                        .WithMany()
                        .HasForeignKey("DeferredTaxAssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "FixedAssets")
                        .WithMany()
                        .HasForeignKey("FixedAssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "IntangibleAssets")
                        .WithMany()
                        .HasForeignKey("IntangibleAssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "InvestmentProperty")
                        .WithMany()
                        .HasForeignKey("InvestmentPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "LongTermBiologicalAssets")
                        .WithMany()
                        .HasForeignKey("LongTermBiologicalAssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "LongTermFinancialInvestments")
                        .WithMany()
                        .HasForeignKey("LongTermFinancialInvestmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "LongTermReceivables")
                        .WithMany()
                        .HasForeignKey("LongTermReceivablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "OriginalCost")
                        .WithMany()
                        .HasForeignKey("OriginalCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "OriginalCostOfFixedAssets")
                        .WithMany()
                        .HasForeignKey("OriginalCostOfFixedAssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "OtherFinancialInvestments")
                        .WithMany()
                        .HasForeignKey("OtherFinancialInvestmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "OtherNonCurrentAssets")
                        .WithMany()
                        .HasForeignKey("OtherNonCurrentAssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "Sum")
                        .WithMany()
                        .HasForeignKey("SumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "UncompletedCapitalInvestments")
                        .WithMany()
                        .HasForeignKey("UncompletedCapitalInvestmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "Wear")
                        .WithMany()
                        .HasForeignKey("WearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccumulatedDepreciation");

                    b.Navigation("DeferredTaxAssets");

                    b.Navigation("FixedAssets");

                    b.Navigation("IntangibleAssets");

                    b.Navigation("InvestmentProperty");

                    b.Navigation("LongTermBiologicalAssets");

                    b.Navigation("LongTermFinancialInvestments");

                    b.Navigation("LongTermReceivables");

                    b.Navigation("OriginalCost");

                    b.Navigation("OriginalCostOfFixedAssets");

                    b.Navigation("OtherFinancialInvestments");

                    b.Navigation("OtherNonCurrentAssets");

                    b.Navigation("Sum");

                    b.Navigation("UncompletedCapitalInvestments");

                    b.Navigation("Wear");
                });

            modelBuilder.Entity("FInProject.Models.NonCurrentAssetsHeldForSaleDisposalGroup", b =>
                {
                    b.HasOne("FInProject.Models.Asset", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "NonCurrentAssetsHeldForSale")
                        .WithMany()
                        .HasForeignKey("NonCurrentAssetsHeldForSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Balance");

                    b.Navigation("NonCurrentAssetsHeldForSale");
                });

            modelBuilder.Entity("FInProject.Models.RegisteredCapital", b =>
                {
                    b.HasOne("FInProject.Models.Asset", "AdditionalCapital")
                        .WithMany()
                        .HasForeignKey("AdditionalCapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "PaidInCapital")
                        .WithMany()
                        .HasForeignKey("PaidInCapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "ReserveCapital")
                        .WithMany()
                        .HasForeignKey("ReserveCapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "RetainedEarnings")
                        .WithMany()
                        .HasForeignKey("RetainedEarningsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "RevaluationReserve")
                        .WithMany()
                        .HasForeignKey("RevaluationReserveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "Sum")
                        .WithMany()
                        .HasForeignKey("SumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "UnpaidCapital")
                        .WithMany()
                        .HasForeignKey("UnpaidCapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FInProject.Models.Asset", "WithdrawnCapital")
                        .WithMany()
                        .HasForeignKey("WithdrawnCapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalCapital");

                    b.Navigation("PaidInCapital");

                    b.Navigation("ReserveCapital");

                    b.Navigation("RetainedEarnings");

                    b.Navigation("RevaluationReserve");

                    b.Navigation("Sum");

                    b.Navigation("UnpaidCapital");

                    b.Navigation("WithdrawnCapital");
                });
#pragma warning restore 612, 618
        }
    }
}
